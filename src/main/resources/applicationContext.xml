<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">


    <context:component-scan base-package="com.xym.shiro.service"/>
    <context:component-scan base-package="com.xym.shiro.exception"/>

    <!-- =========================================================
             Shiro Core Components - Not Spring Specific
             ========================================================= -->
    <!-- Shiro's main business-tier object for web-enabled applications
         (use DefaultSecurityManager instead when there is no web environment)-->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="cacheManager" ref="cacheManager"/>
        <!--<property name="realm" ref="jdbcRealm"/>-->
        <!--配置认证器-->
        <property name="authenticator" ref="authenticator"></property>
        <!--测试多realms-->
        <property name="realms">
            <list>
                <ref bean="jdbcRealm"/>
                <ref bean="shiroRealm"/>
                <ref bean="sha1Realm"/>
                <ref bean="authorizationRealm"/>
            </list>
        </property>
        <!--cookie有效时间为10秒-->
        <property name="rememberMeManager.cookie.maxAge" value="10"/>
    </bean>

    <!--具有一定认证策略的认证器-->
    <bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
        <property name="authenticationStrategy">
            <!--<bean class="org.apache.shiro.authc.pam.FirstSuccessfulStrategy"/>-->
            <!--认证策略-->
            <bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"/>
        </property>
        <!--&lt;!&ndash;测试多realms&ndash;&gt;-->
        <!--<property name="realms">-->
        <!--<list>-->
        <!--<ref bean="jdbcRealm"/>-->
        <!--<ref bean="shiroRealm"/>-->
        <!--<ref bean="sha1Realm"/>-->
        <!--</list>-->
        <!--</property>-->
    </bean>

    <!-- Let's use some enterprise caching support for better performance.  You can replace this with any enterprise
         caching framework implementation that you like (Terracotta+Ehcache, Coherence, GigaSpaces, etc -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <!-- Set a net.sf.ehcache.CacheManager instance here if you already have one.  If not, a new one
             will be creaed with a default config:
             <property name="cacheManager" ref="ehCacheManager"/> -->
        <!-- If you don't have a pre-built net.sf.ehcache.CacheManager instance to inject, but you want
             a specific Ehcache configuration to be used, specify that here.  If you don't, a default
             will be used.:-->
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
    </bean>


    <!-- Used by the SecurityManager to access security data (users, roles, etc).
         Many other realm implementations can be used too (PropertiecsRealm,
         LdapRealm, etc. -->
    <!--自定义安全数据源-->
    <!--<bean id="jdbcRealm" class="com.xym.shiro.realm.ShiroRealm">
    </bean>-->
    <bean id="jdbcRealm" class="com.xym.shiro.realm.EncryptRealm">
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <property name="hashAlgorithmName" value="MD5"></property>
                <property name="hashIterations" value="1024"></property>
            </bean>
        </property>
    </bean>

    <bean id="shiroRealm" class="com.xym.shiro.realm.ShiroRealm"/>

    <!--采用sha1加密方式-->
    <bean id="sha1Realm" class="com.xym.shiro.realm.EncryptSHA1Realm">
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <property name="hashAlgorithmName" value="SHA1"></property>
                <property name="hashIterations" value="1024"></property>
            </bean>
        </property>
    </bean>


    <!--带授权及认证逻辑的realm-->
    <bean id="authorizationRealm" class="com.xym.shiro.realm.MyAuthorizationRealm">
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <property name="hashAlgorithmName" value="MD5"></property>
                <property name="hashIterations" value="1024"></property>
            </bean>
        </property>
    </bean>


    <!-- =========================================================
         Shiro Spring-specific integration
         ========================================================= -->
    <!-- Post processor that automatically invokes init() and destroy() methods
         for Spring-configured Shiro objects so you don't have to
         1) specify an init-method and destroy-method attributes for every bean
            definition and
         2) even know which Shiro objects require these methods to be
            called. -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- Enable Shiro Annotations for Spring-configured beans.  Only run after
         the lifecycleBeanProcessor has run: -->
    <!--使shiro支持使用注解-->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!-- Define the Shiro Filter here (as a FactoryBean) instead of directly in web.xml -
         web.xml uses the DelegatingFilterProxy to access this bean.  This allows us
         to wire things with more control as well utilize nice Spring things such as
         PropertiesPlaceholderConfigurer and abstract beans or anything else we might need: -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/login.jsp"/>
        <property name="successUrl" value="/list.jsp"/>
        <property name="unauthorizedUrl" value="/unauthorized.jsp"/>
        <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean
             defined will be automatically acquired and available via its beanName in chain
             definitions, but you can perform overrides or parent/child consolidated configuration
             here if you like: -->
        <!-- <property name="filters">
            <util:map>
                <entry key="aName" value-ref="someFilterPojo"/>
            </util:map>
        </property> -->
        <!--<property name="filterChainDefinitions">
            <value>
                /shiro/login=anon
                /login.jsp=anon
                /logout.jsp=logout
                /user.jsp=roles[user]
                /admin.jsp=roles[admin]
                # everything else requires authentication:
                /** = authc
            </value>
        </property>-->

        <!--动态构造访问权限-->
        <property name="filterChainDefinitionMap">
            <ref bean="filterChainDefinitionMap"></ref>
        </property>
    </bean>

    <!--通过实例工厂方法模式创建map-->
    <bean id="filterChainDefinitionMap" factory-bean="builder" factory-method="buildFilterChainDefinitionMap"/>
    <bean id="builder" class="com.xym.shiro.factory.FilterChainDefinitionMapBuilder"></bean>

</beans>